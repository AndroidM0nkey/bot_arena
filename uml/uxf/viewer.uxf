<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>180</y>
      <w>230</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Cell
--
-bounds: pygame.rect
+left: int
+right: int
+top: int
+bottom: int
+width: int
+height: int
+center: int
+centerx: int
+centery: int
--
+draw(surface: pygame.display)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>160</y>
      <w>230</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Apple
--
-radius: int
-colot: tuple
--
+draw(surface: pygame.display)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>370</x>
      <y>160</y>
      <w>230</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>SnakeBodyPeace
--
-color: tuple
--
+get_color()
+draw(surface: pygame.display,
is_alive:bool)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>930</x>
      <y>200</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>200</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>390</x>
      <y>360</y>
      <w>250</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Snake
--
-body_peaces: List[SnakeBodyPeace]
-alive: bool
-name: str
--
+get_alive_status()
+get_color()
+get_name()
+draw(surface: pygame.display)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>340</x>
      <y>110</y>
      <w>1070</w>
      <h>510</h>
    </coordinates>
    <panel_attributes>Helper classes
--
bg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>380</x>
      <y>690</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Session
--
-tcpstream
--
requestFieldState(fieldstate)
sendAction(action : Action)
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>290</x>
      <y>70</y>
      <w>1170</w>
      <h>790</h>
    </coordinates>
    <panel_attributes>main
--
bg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>180</x>
      <y>720</y>
      <w>220</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=-
TCP connection
</panel_attributes>
    <additional_attributes>10.0;20.0;200.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>50</x>
      <y>720</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>/(Server)/
lt=.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>590</y>
      <w>580</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Displaying current game state using FieldState object</panel_attributes>
    <additional_attributes>10.0;150.0;560.0;150.0;560.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>260</y>
      <w>230</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Viewer
--
-all_snakes: Dict[str, SnakeState]
-player_colors: List[tuple]
-colors_mapping: Dict[str, tuple]
-last_fieldstate: FieldState
-score: Dict[str, int]
-height: int
-width: int
--
+reset()
+get_score()
+get_lastfieldstate()
+get_height()
+get_width()
+invert(p:int, field_height:int)
+get_message_and_display(
cur_state:FieldState,
field_height:int,
field_width:int,
score:Dict[str, int],
winners:Dict[str, List[str]])
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
